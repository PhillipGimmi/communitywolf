import { createRouteHandler } from './server';
import type { Database } from './database.types';

// Type-safe database operations
export type UserProfileRow = Database['public']['Tables']['user_profiles']['Row'];
export type UserProfileUpdate = Database['public']['Tables']['user_profiles']['Update'];

// Type-safe client wrapper
export async function createTypedClient() {
  const supabase = await createRouteHandler();
  
  const buildSelectQuery = (table: 'user_profiles', query: string) => ({
    eq: (column: 'id', value: string) => ({
      single: () => supabase
        .from(table)
        .select(query)
        .eq(column, value)
        .single()
    })
  });

  const buildUpdateQuery = (table: 'user_profiles', data: UserProfileUpdate) => ({
    eq: (column: 'id', value: string) => 
      supabase
        .from(table)
        .update(data)
        .eq(column, value)
  });
  
  return {
    auth: supabase.auth,
    from: (table: 'user_profiles') => ({
      select: (query: string) => buildSelectQuery(table, query),
      update: (data: UserProfileUpdate) => buildUpdateQuery(table, data)
    })
  };
}
